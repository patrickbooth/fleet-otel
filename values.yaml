mode: daemonset

presets:
  # enables the k8sattributesprocessor and adds it to the traces, metrics, and logs pipelines
  kubernetesAttributes:
    enabled: true
  # enables the kubeletstatsreceiver and adds it to the metrics pipelines
  kubeletMetrics:
    enabled: true
  # Enables the filelogreceiver and adds it to the logs pipelines
  logsCollection:
    enabled: false
## The chart only includes the loggingexporter by default
## If you want to send your data somewhere you need to
## configure an exporter, such as the otlpexporter
config:
  receivers:
    kubeletstats:
      endpoint: "https://172.16.244.135:10250"  # talos host names don't resolve, so use NodeIP instead
      insecure_skip_verify: true
  exporters:
    prometheusremotewrite:
    # endpoint: "https:<ID>:<TOKEN>@<GRAFANA_PROM_URL>"  
    #   endpoint: "https://1464027:glc_eyJvIjoiMTA3MTQ5MyIsIm4iOiJzZW5kLW90ZWwtc2VuZC1vdGVsIiwiayI6IjdXZjA2UXRYM3F1V2ZYbUM2MWwyOTA4UyIsIm0iOnsiciI6InVzIn19@prometheus-prod-24-prod-eu-west-2.grafana.net/api/prom/push"
      endpoint: "${env:PROM_EXPORT_URL}"
  ## In local example the agent will send data to grafana directly using the above configuration.
  ## A more production like configuration would be to configure a gateway.  
  ## The agents would use the otlp endpoint, and that in turn will send data to grafana
  #  otlp: 
  #    endpoint: "<SOME BACKEND>"
  ## Adding additional receiver configuration to fix issue with scraping kubeletstats metrics
  ## Source: https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/26481
  service:
    pipelines:
  #    traces:
  #      exporters: [ otlp ]
      metrics:
        exporters: [ prometheusremotewrite ]
  #    logs:
  #      exporters: [  ]
env:
- name: PROM_EXPORT_URL
  valueFrom:
    secretKeyRef:
      name: grafana-secrets
      key: prom_export
