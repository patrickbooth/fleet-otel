mode: daemonset

presets:
  # enables the k8sattributesprocessor and adds it to the traces, metrics, and logs pipelines
  kubernetesAttributes:
    enabled: true
  # enables the kubeletstatsreceiver and adds it to the metrics pipelines
  kubeletMetrics:
    enabled: true
  # Enables the filelogreceiver and adds it to the logs pipelines
  logsCollection:
    enabled: false
## The chart only includes the loggingexporter by default
## If you want to send your data somewhere you need to
## configure an exporter, such as the otlpexporter
config:
  receivers:
    kubeletstats:
      endpoint: ${ cat "$" "{MY_NODE_IP}" ":10250" | nospace } # talos host names don't resolve, so use NodeIP instead
      insecure_skip_verify: true
  exporters:
    prometheusremotewrite:
    # endpoint: "https:<ID>:<TOKEN>@<GRAFÂ§ANA_PROM_URL>"  
      endpoint: ${ cat "$" "{PROMETHEUS_ENDPOINT}" | nospace }
    loki:
      endpoint: ${ cat "$" "{LOKI_ENDPOINT}" | nospace }
  ## In local example the agent will send data to grafana directly using the above configuration.
  ## A more production like configuration would be to configure a gateway.  
  ## The agents would use the otlp endpoint, and that in turn will send data to grafana
  #  otlp: 
  #    endpoint: "<SOME BACKEND>"
  ## Adding additional receiver configuration to fix issue with scraping kubeletstats metrics
  ## Source: https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/26481
  service:
    pipelines:
  #    traces:
  #      exporters: [ otlp ]
      metrics:
        exporters: [ prometheusremotewrite ]
      logs:
        exporters: [ loki ]
extraEnvs:
  - name: PROMETHEUS_ENDPOINT
    valueFrom:
      secretKeyRef:
        name: grafana-metrics
        key: prometheus-endpoint
  - name: LOKI_ENDPOINT
    valueFrom:
      secretKeyRef:
        name: grafana-logs
        key: loki-endpoint
  - name: MY_NODE_IP
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: status.hostIP
