mode: daemonset

securityContext:
  runAsUser: 0

presets:
  # enables the k8sattributesprocessor and adds it to the traces, metrics, and logs pipelines
  kubernetesAttributes:
    enabled: true
  # enables the kubeletstatsreceiver and adds it to the metrics pipelines
  kubeletMetrics:
    enabled: true
  # Enables the filelogreceiver and adds it to the logs pipelines
  logsCollection:
    enabled: true
    includeCollectorLogs: true
## The chart only includes the loggingexporter by default
## If you want to send your data somewhere you need to
## configure an exporter, such as the otlpexporter
config:
  receivers:
    kubeletstats:
      endpoint: ${ cat "$" "{MY_NODE_IP}" ":10250" | nospace } # talos host names don't resolve, so use NodeIP instead
      insecure_skip_verify: true
    prometheus/discovery:
      config:
        scrape_configs:
          - job_name: otel-prometheus-discovery
            tls_config:
              insecure_skip_verify: true
            scrape_interval: 30s # correct value to be decided
            scrape_timeout: 10s
            kubernetes_sd_configs:
              - role: pod
                selectors:
                  - role: pod
                    # only scrape data from pods running on the same node as collector
                    field: 'spec.nodeName=${ cat "$" "{K8S_NODE_NAME}" | nospace }'
            relabel_configs:
              # Examine the 4 discovery annotations; they need to *all* be present
              # and we will additionally do a tiny bit of validation here to make
              # sure they appear to be set to sensible values
              - source_labels:
                  - __meta_kubernetes_pod_annotation_prometheus_io_scrape
                  - __meta_kubernetes_pod_annotation_prometheus_io_scheme
                  - __meta_kubernetes_pod_annotation_prometheus_io_path
                  - __meta_kubernetes_pod_annotation_prometheus_io_port
                action: keep
                regex: (true);(https?);(/.+);(\d+)
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                action: replace
                target_label: __scheme__
                regex: (https?)
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                action: replace
                target_label: __address__
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: $$1:$$2
  processors:
    resource/clustername:
      attributes:
        - key: k8s.cluster.name
          value: global.fleet.clusterLabels.cluster_name
          action: insert
    resource/loki_hints:
      attributes:
        - action: insert
          key: loki.resource.labels
          value: >-
            k8s.cluster.name,
            k8s.namespace.name,
            k8s.container.name
  exporters:
    prometheusremotewrite:
    # endpoint: "https:<ID>:<TOKEN>@<GRAFÂ§ANA_PROM_URL>"  
      endpoint: ${ cat "$" "{PROMETHEUS_ENDPOINT}" | nospace }
      resource_to_telemetry_conversion: 
        enabled: true
    loki:
      endpoint: ${ cat "$" "{LOKI_ENDPOINT}" | nospace }
      tls:
        insecure: true
 ## In local example the agent will send data to grafana directly using the above configuration.
  ## A more production like configuration would be to configure a gateway.  
  ## The agents would use the otlp endpoint, and that in turn will send data to grafana
  #  otlp: 
  #    endpoint: "<SOME BACKEND>"
  ## Adding additional receiver configuration to fix issue with scraping kubeletstats metrics
  ## Source: https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/26481
  service:
    pipelines:
  #    traces:
  #      exporters: [ otlp ]
      metrics:
        exporters: [ prometheusremotewrite ]
        receivers:
          - prometheus/discovery
          - prometheus
          - otlp
        processors:
          - memory_limiter
          - resource/clustername
          - batch
      logs:
        exporters: [ loki ] 
        processors:
          - memory_limiter
          - resource/clustername
          - resource/loki_hints
          - batch
extraEnvs:
  - name: PROMETHEUS_ENDPOINT
    valueFrom:
      secretKeyRef:
        name: grafana-metrics
        key: prometheus-endpoint
  - name: LOKI_ENDPOINT
    valueFrom:
      secretKeyRef:
        name: grafana-logs
        key: loki-endpoint
  - name: MY_NODE_IP
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: status.hostIP
